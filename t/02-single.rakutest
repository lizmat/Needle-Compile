BEGIN %*ENV<RAKU_TEST_DIE_ON_FAIL> = 1;

use Test;
use Needle::Compile;

plan 5;

contains "foo", "foo", "bar", "find simple 'foo'";

starts-with "foo", "foo", "bar", "starts with simple 'foo'";

ends-with "foo", "foo", "bar", "ends with simple 'foo'";

equal "foo", "foo", "bar", "equal simple 'foo'";

words "foo", "foo", "bar", "words simple 'foo'";

#-------------------------------------------------------------------------------
# Infrastructure

# Adding a .type method to an object
my role Type {
    has $.type;
    method raku() { callsame() ~ " but Type('$!type')" }
}

# All possible tests for contains
my sub contains($target, $hit, $miss, $comment) is test-assertion {
    subtest "contains: $comment" => {
        my $ascode := ".contains('$target')";

        my @targets =
          $target,
          $target but Type("auto"),
          $target but Type("contains"),
          $target but Type("regex"),
          $ascode but Type("code"),
          "/$target/",
          "\{$ascode}",
          "*$ascode",
          auto     => $target,
          contains => $target,
          regex    => $target,
          code     => $ascode,
        ;

        my @autonots = @targets.map({ "!$_" if .WHAT =:= Str });

        plan 8 * @targets + 4 * @autonots;

        for @targets {
            my $needle := compile-needle($_);
            isa-ok $needle, Callable, "Testing $_.raku()";

            is-deeply $needle($hit),          True,  "hit '$hit'";
            is-deeply $needle("in{$hit}out"), True,  "hit 'in{$hit}out'";
            is-deeply $needle($miss),         False, "miss '$miss'";

            my $not := compile-needle( (not => $_,) );
            isa-ok $not, Callable, "Testing not $_.raku()";

            is-deeply $not($hit),          False, "not hit '$hit'";
            is-deeply $not("in{$hit}out"), False, "not hit 'in{$hit}out'";
            is-deeply $not($miss),         True,  "not miss '$miss'";
        }

        for @autonots {
            my $not := compile-needle($_);
            isa-ok $not, Callable, "Testing '$_'";

            is-deeply $not($hit),          False, "! hit '$hit'";
            is-deeply $not("in{$hit}out"), False, "! hit 'in{$hit}out'";
            is-deeply $not($miss),         True,  "! miss '$miss'";
        }
    }
}

# All possible tests for starts-with
my sub starts-with($target, $hit, $miss, $comment) is test-assertion {
    subtest "starts-with: $comment" => {
        my $auto   := "^$target";
        my $ascode := ".starts-with('$target')";

        my @targets =
          $target but Type("starts-with"),
          $auto,
          $auto   but Type("auto"),
          $auto   but Type("regex"),
          $ascode but Type("code"),
          "/^ $target/",
          "\{$ascode}",
          "*$ascode",
          starts-with => $target,
          auto        => $auto,
          regex       => $auto,
          code        => $ascode,
        ;

        my @autonots = @targets.map({ "!$_" if .WHAT =:= Str });

        plan 8 * @targets + 4 * @autonots;

        for @targets {
            my $needle := compile-needle($_);
            isa-ok $needle, Callable, "Testing $_.raku()";

            is-deeply $needle($hit),    True,  "hit '$hit'";
            is-deeply $needle(" $hit"), False, "miss ' $hit'";
            is-deeply $needle($miss),   False, "miss '$miss'";

            my $not := compile-needle( (not => $_,) );
            isa-ok $not, Callable, "Testing not $_.raku()";

            is-deeply $not($hit),    False, "not hit '$hit'";
            is-deeply $not(" $hit"), True,  "not miss ' $hit'";
            is-deeply $not($miss),   True,  "not miss '$miss'";
        }

        for @autonots {
            my $not := compile-needle($_);
            isa-ok $not, Callable, "Testing !$_";

            is-deeply $not($hit),    False, "! hit '$hit'";
            is-deeply $not(" $hit"), True,  "! miss ' $hit'";
            is-deeply $not($miss),   True,  "! miss '$miss'";
        }
    }
}

# All possible tests for ends-with
my sub ends-with($target, $hit, $miss, $comment) is test-assertion {
    subtest "ends-with: $comment" => {
        my $auto   := $target ~ '$';
        my $ascode := ".ends-with('$target')";

        my @targets =
          $target but Type("ends-with"),
          $auto,
          $auto   but Type("auto"),
          $auto   but Type("regex"),
          $ascode but Type("code"),
          "/$target \$/",
          "\{$ascode}",
          "*$ascode",
          ends-with => $target,
          auto      => $auto,
          code      => $ascode,
          regex     => $auto,
        ;

        my @autonots = @targets.map({ "!$_" if .WHAT =:= Str });

        plan 8 * @targets + 4 * @autonots;

        for @targets {
            my $needle := compile-needle($_);
            isa-ok $needle, Callable, "Testing $_.raku()";

            is-deeply $needle($hit),    True,  "hit '$hit'";
            is-deeply $needle("$hit "), False, "miss '$hit '";
            is-deeply $needle($miss),   False, "miss '$miss'";

            my $not := compile-needle( (not => $_,) );
            isa-ok $not, Callable, "Testing not $_.raku()";

            is-deeply $not($hit),    False, "not hit '$hit'";
            is-deeply $not("$hit "), True,  "not miss '$hit '";
            is-deeply $not($miss),   True,  "not miss '$miss'";
        }

        for @autonots {
            my $not := compile-needle($_);
            isa-ok $not, Callable, "Testing !$_";

            is-deeply $not($hit),    False, "! hit '$hit'";
            is-deeply $not("$hit "), True,  "! miss '$hit '";
            is-deeply $not($miss),   True,  "! miss '$miss'";
        }
    }
}

# All possible tests for equal
my sub equal($target, $hit, $miss, $comment) is test-assertion {
    subtest "equal: $comment" => {
        my $auto   := "^$target\$";
        my $ascode := "'$target' eq \$_";

        my @targets =
          $target but Type("equal"),
          $auto,
          $auto   but Type("auto"),
          $ascode but Type("code"),
          "/^ $target \$/",
          "\{$ascode}",
          auto  => $auto,
          regex => $auto,
          code  => $ascode,
        ;

        my @autonots = @targets.map({ "!$_" if .WHAT =:= Str });

        plan 8 * @targets + 4 * @autonots;

        for @targets {
            my $needle := compile-needle($_);
            isa-ok $needle, Callable, "Testing $_.raku()";

            is-deeply $needle($hit),     True,  "hit '$hit'";
            is-deeply $needle(" $hit "), False, "miss ' $hit '";
            is-deeply $needle($miss),    False, "miss '$miss'";

            my $not := compile-needle( (not => $_,) );
            isa-ok $not, Callable, "Testing not $_.raku()";

            is-deeply $not($hit),     False, "not hit '$hit'";
            is-deeply $not(" $hit "), True,  "not miss ' $hit '";
            is-deeply $not($miss),    True,  "not miss '$miss'";
        }

        for @autonots {
            my $not := compile-needle($_);
            isa-ok $not, Callable, "Testing !$_";

            is-deeply $not($hit),     False, "! hit '$hit'";
            is-deeply $not(" $hit "), True,  "! miss ' $hit '";
            is-deeply $not($miss),    True,  "! miss '$miss'";
        }
    }
}

# All possible tests for words
my sub words($target, $hit, $miss, $comment) is test-assertion {
    subtest "words: $comment" => {
        my $auto := "ยง$target";

        my @targets =
          $target but Type("words"),
          $auto,
          $auto   but Type("auto"),
          words => $target,
          auto  => $auto,
        ;

        my @autonots = @targets.map({ "!$_" if .WHAT =:= Str });

        plan 12 * @targets + 6 * @autonots;

        for @targets {
            my $needle := compile-needle($_);
            isa-ok $needle, Callable, "Testing $_.raku()";

            is-deeply $needle($hit),         True,  "hit '$hit'";
            is-deeply $needle(" $hit "),     True,  "hit ' $hit '";
            is-deeply $needle(":$hit:"),     True,  "hit ':$hit:'";
            is-deeply $needle("oo{$hit}ff"), False, "miss 'oo{$hit}ff'";
            is-deeply $needle($miss),        False, "miss '$miss'";

            my $not := compile-needle( (not => $_,) );
            isa-ok $not, Callable, "Testing not $_.raku()";

            is-deeply $not($hit),         False, "not hit '$hit'";
            is-deeply $not(" $hit "),     False, "not hit ' $hit '";
            is-deeply $not(":$hit:"),     False, "not hit ':$hit:'";
            is-deeply $not("oo{$hit}ff"), True,  "not miss 'oo{$hit}ff'";
            is-deeply $not($miss),        True,  "not miss '$miss'";
        }

        for @autonots {
            my $not := compile-needle($_);
            isa-ok $not, Callable, "Testing !$_";

            is-deeply $not($hit),         False, "! hit '$hit'";
            is-deeply $not(" $hit "),     False, "! hit ' $hit '";
            is-deeply $not(":$hit:"),     False, "! hit ':$hit:'";
            is-deeply $not("oo{$hit}ff"), True,  "! miss 'oo{$hit}ff'";
            is-deeply $not($miss),        True,  "! miss '$miss'";
        }
    }
}

# vim: expandtab shiftwidth=4
